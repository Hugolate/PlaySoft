// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace PlaySoftBeta.Migrations
{
    [DbContext(typeof(RepositoryContext))]
    [Migration("20230516190956_database")]
    partial class database
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("PlaySoftBeta.Models.Album", b =>
                {
                    b.Property<int>("albumID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("albumID"));

                    b.Property<string>("albumName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("releaseDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("spotifyAlbumID")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("totalTracks")
                        .HasColumnType("int");

                    b.HasKey("albumID");

                    b.ToTable("Album");
                });

            modelBuilder.Entity("PlaySoftBeta.Models.Artist", b =>
                {
                    b.Property<int>("artistID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("artistID"));

                    b.Property<string>("artistName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("spotifyArtistID")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("artistID");

                    b.ToTable("Artist");
                });

            modelBuilder.Entity("PlaySoftBeta.Models.ArtistAlbums", b =>
                {
                    b.Property<int>("albumID")
                        .HasColumnType("int");

                    b.Property<int>("artistID")
                        .HasColumnType("int");

                    b.HasKey("albumID", "artistID");

                    b.HasIndex("artistID");

                    b.ToTable("ArtistAlbums");
                });

            modelBuilder.Entity("PlaySoftBeta.Models.ArtistSongs", b =>
                {
                    b.Property<int>("songID")
                        .HasColumnType("int");

                    b.Property<int>("artistID")
                        .HasColumnType("int");

                    b.HasKey("songID", "artistID");

                    b.HasIndex("artistID");

                    b.ToTable("AlbumLines");
                });

            modelBuilder.Entity("PlaySoftBeta.Models.Playlist", b =>
                {
                    b.Property<int>("playlistID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("playlistID"));

                    b.Property<string>("playListName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("playlistDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("privacity")
                        .HasColumnType("bit");

                    b.Property<int>("userUKID")
                        .HasColumnType("int");

                    b.HasKey("playlistID");

                    b.HasIndex("userUKID");

                    b.ToTable("Playlists");
                });

            modelBuilder.Entity("PlaySoftBeta.Models.PlaylistLines", b =>
                {
                    b.Property<int>("playlistID")
                        .HasColumnType("int");

                    b.Property<int>("songID")
                        .HasColumnType("int");

                    b.HasKey("playlistID", "songID");

                    b.HasIndex("songID");

                    b.ToTable("PlaylistLines");
                });

            modelBuilder.Entity("PlaySoftBeta.Models.Song", b =>
                {
                    b.Property<int>("songID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("songID"));

                    b.Property<int>("AlbumID")
                        .HasColumnType("int");

                    b.Property<int>("durationMs")
                        .HasColumnType("int");

                    b.Property<DateTime>("publicationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("songName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("spotifySongID")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("songID");

                    b.HasIndex("AlbumID");

                    b.ToTable("Songs");
                });

            modelBuilder.Entity("PlaySoftBeta.Models.User", b =>
                {
                    b.Property<int>("UKID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UKID"));

                    b.Property<string>("email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UKID");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("PlaySoftBeta.Models.ArtistAlbums", b =>
                {
                    b.HasOne("PlaySoftBeta.Models.Album", "Album")
                        .WithMany("ArtistAlbums")
                        .HasForeignKey("albumID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PlaySoftBeta.Models.Artist", "Artist")
                        .WithMany("ArtistAlbum")
                        .HasForeignKey("artistID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Album");

                    b.Navigation("Artist");
                });

            modelBuilder.Entity("PlaySoftBeta.Models.ArtistSongs", b =>
                {
                    b.HasOne("PlaySoftBeta.Models.Artist", "Artist")
                        .WithMany("ArtistSongs")
                        .HasForeignKey("artistID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PlaySoftBeta.Models.Song", "Song")
                        .WithMany()
                        .HasForeignKey("songID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Artist");

                    b.Navigation("Song");
                });

            modelBuilder.Entity("PlaySoftBeta.Models.Playlist", b =>
                {
                    b.HasOne("PlaySoftBeta.Models.User", "User")
                        .WithMany("Playlists")
                        .HasForeignKey("userUKID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("PlaySoftBeta.Models.PlaylistLines", b =>
                {
                    b.HasOne("PlaySoftBeta.Models.Playlist", "Playlist")
                        .WithMany("PlaylistLines")
                        .HasForeignKey("playlistID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PlaySoftBeta.Models.Song", "Song")
                        .WithMany("PlaylistLines")
                        .HasForeignKey("songID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Playlist");

                    b.Navigation("Song");
                });

            modelBuilder.Entity("PlaySoftBeta.Models.Song", b =>
                {
                    b.HasOne("PlaySoftBeta.Models.Album", "User")
                        .WithMany("Songs")
                        .HasForeignKey("AlbumID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("PlaySoftBeta.Models.Album", b =>
                {
                    b.Navigation("ArtistAlbums");

                    b.Navigation("Songs");
                });

            modelBuilder.Entity("PlaySoftBeta.Models.Artist", b =>
                {
                    b.Navigation("ArtistAlbum");

                    b.Navigation("ArtistSongs");
                });

            modelBuilder.Entity("PlaySoftBeta.Models.Playlist", b =>
                {
                    b.Navigation("PlaylistLines");
                });

            modelBuilder.Entity("PlaySoftBeta.Models.Song", b =>
                {
                    b.Navigation("PlaylistLines");
                });

            modelBuilder.Entity("PlaySoftBeta.Models.User", b =>
                {
                    b.Navigation("Playlists");
                });
#pragma warning restore 612, 618
        }
    }
}
